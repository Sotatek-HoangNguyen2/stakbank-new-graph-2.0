// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class StakeEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StakeEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakeEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakeEntity", id.toString(), this);
  }

  static load(id: string): StakeEntity | null {
    return store.get("StakeEntity", id) as StakeEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get stakingFunds(): BigInt | null {
    let value = this.get("stakingFunds");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakingFunds(value: BigInt | null) {
    if (value === null) {
      this.unset("stakingFunds");
    } else {
      this.set("stakingFunds", Value.fromBigInt(value as BigInt));
    }
  }
}

export class WithdrawEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WithdrawEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WithdrawEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WithdrawEntity", id.toString(), this);
  }

  static load(id: string): WithdrawEntity | null {
    return store.get("WithdrawEntity", id) as WithdrawEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): i32 {
    let value = this.get("pool");
    return value.toI32();
  }

  set pool(value: i32) {
    this.set("pool", Value.fromI32(value));
  }

  get userAddress(): Bytes | null {
    let value = this.get("userAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromBytes(value as Bytes));
    }
  }

  get principal(): BigInt | null {
    let value = this.get("principal");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set principal(value: BigInt | null) {
    if (value === null) {
      this.unset("principal");
    } else {
      this.set("principal", Value.fromBigInt(value as BigInt));
    }
  }

  get yieldNumber(): BigInt | null {
    let value = this.get("yieldNumber");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set yieldNumber(value: BigInt | null) {
    if (value === null) {
      this.unset("yieldNumber");
    } else {
      this.set("yieldNumber", Value.fromBigInt(value as BigInt));
    }
  }

  get userFundsRemaining(): BigInt | null {
    let value = this.get("userFundsRemaining");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set userFundsRemaining(value: BigInt | null) {
    if (value === null) {
      this.unset("userFundsRemaining");
    } else {
      this.set("userFundsRemaining", Value.fromBigInt(value as BigInt));
    }
  }

  get stakingFundsRemaining(): BigInt | null {
    let value = this.get("stakingFundsRemaining");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set stakingFundsRemaining(value: BigInt | null) {
    if (value === null) {
      this.unset("stakingFundsRemaining");
    } else {
      this.set("stakingFundsRemaining", Value.fromBigInt(value as BigInt));
    }
  }
}
